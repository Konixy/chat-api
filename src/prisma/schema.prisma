datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64"]
}

model Account {
  id                String  @id @default(uuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String                    @id @default(uuid()) @map("_id")
  name            String?
  username        String?                   @unique
  conversations   ConversationParticipant[]
  messages        Message[]
  seenMessagesIds String[]
  seenMessages    Message[]                 @relation(name: "messageSeenBy", fields: [seenMessagesIds], references: [id])
  email           String?                   @unique
  emailVerified   Boolean?                  @default(false)
  image           String?
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime                  @default(now())
}

model VerificationToken {
  id         String   @id @default(uuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id              String                    @id @default(uuid()) @map("_id")
  participants    ConversationParticipant[]
  messages        Message[]
  latestMessageId String?                   @unique
  latestMessage   Message?                  @relation(name: "latestConversationMessage", fields: [latestMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
}

model ConversationParticipant {
  id             String       @id @default(uuid()) @map("_id")
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Message {
  id             String        @id @default(uuid()) @map("_id")
  conversationId String
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  senderId       String
  sender         User          @relation(fields: [senderId], references: [id])
  isLatestIn     Conversation? @relation(name: "latestConversationMessage")
  seenByIds      String[]
  seenBy         User[]        @relation(name: "messageSeenBy", fields: [seenByIds], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}
